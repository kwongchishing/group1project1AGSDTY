using UnityEngine;namespace UnityStandardAssets.Characters.ThirdPerson{[RequireComponent(typeof(Rigidbody))][RequireComponent(typeof(CapsuleCollider))][RequireComponent(typeof(Animator))]public class ThirdPersonCharacter1:MonoBehaviour{[SerializeField]float m_MovingTurnSpeed=360;[SerializeField]float m_StationaryTurnSpeed=180;[SerializeField]float m_JumpPower=12f;[Range(1f,4f)][SerializeField]float m_GravityMultiplier=2f;[SerializeField]float m_RunCycleLegOffset=0.2f;[SerializeField]float m_MoveSpeedMultiplier=1f;[SerializeField]float m_AnimSpeedMultiplier=1f;[SerializeField]float m_GroundCheckDistance=0.1f;Rigidbody m_Rigidbody;Animator m_Animator;const float k_Half=0.5f;float m_TurnAmount,m_ForwardAmount,m_CapsuleHeight,m_OrigGroundCheckDistance; Vector3 m_CapsuleCenter,m_GroundNormal; CapsuleCollider m_Capsule;bool m_IsGrounded,m_Crouching, m_IsLightAttacking,m_IsHeavyAttacking,m_Isdie;public bool useStrafeControls;public AudioSource JumpSound;void Start(){m_Animator=GetComponent<Animator>();m_Rigidbody=GetComponent<Rigidbody>();m_Capsule=GetComponent<CapsuleCollider>();m_CapsuleHeight=m_Capsule.height;m_CapsuleCenter=m_Capsule.center;m_Rigidbody.constraints=RigidbodyConstraints.FreezeRotationX|RigidbodyConstraints.FreezeRotationY|RigidbodyConstraints.FreezeRotationZ;m_OrigGroundCheckDistance=m_GroundCheckDistance;}public void Move(Vector3 move,bool crouch,bool jump){if(move.magnitude>1f)move.Normalize();move=transform.InverseTransformDirection(move);CheckGroundStatus();move=Vector3.ProjectOnPlane(move, m_GroundNormal);m_TurnAmount=Mathf.Atan2(move.x, move.z);m_ForwardAmount = move.z;if(useStrafeControls){if(m_ForwardAmount<0.0f){float turnSpeed;turnSpeed=Input.GetAxis("Horizontal");turnSpeed=Mathf.Clamp(turnSpeed,-1.0f,1.0f);transform.Rotate(0.0f,turnSpeed,0.0f);m_Animator.SetFloat("Turn",turnSpeed);}}else{ApplyExtraTurnRotation();}if(m_IsGrounded){HandleGroundedMovement(crouch,jump);}else{HandleAirborneMovement();}ScaleCapsuleForCrouching(crouch);PreventStandingInLowHeadroom();UpdateAnimator(move);}void ScaleCapsuleForCrouching(bool crouch){if(m_IsGrounded&&crouch){if(m_Crouching) return;m_Capsule.height=m_Capsule.height/2f;m_Capsule.center=m_Capsule.center/2f;m_Crouching=true;}else{Ray crouchRay=new Ray(m_Rigidbody.position+Vector3.up*m_Capsule.radius*k_Half,Vector3.up);float crouchRayLength=m_CapsuleHeight-m_Capsule.radius*k_Half;if(Physics.SphereCast(crouchRay,m_Capsule.radius*k_Half,crouchRayLength,Physics.AllLayers,QueryTriggerInteraction.Ignore)){m_Crouching=true;return;}m_Capsule.height=m_CapsuleHeight;m_Capsule.center=m_CapsuleCenter;m_Crouching=false;}}void PreventStandingInLowHeadroom(){if(!m_Crouching){Ray crouchRay=new Ray(m_Rigidbody.position+Vector3.up*m_Capsule.radius*k_Half,Vector3.up);float crouchRayLength=m_CapsuleHeight-m_Capsule.radius*k_Half;if(Physics.SphereCast(crouchRay,m_Capsule.radius*k_Half,crouchRayLength,Physics.AllLayers,QueryTriggerInteraction.Ignore)){m_Crouching=true;}}}void UpdateAnimator(Vector3 move){m_Animator.SetFloat("Forward", m_ForwardAmount, 0.1f, Time.deltaTime);m_Animator.SetFloat("Turn",m_TurnAmount,0.1f,Time.deltaTime);m_Animator.SetBool("Crouch", m_Crouching);m_Animator.SetBool("OnGround", m_IsGrounded);m_Animator.SetBool("LightAttack", m_IsLightAttacking);m_Animator.SetBool("HeavyAttack", m_IsHeavyAttacking);m_Animator.SetBool("IsDead", m_Isdie);if(!m_IsGrounded){m_Animator.SetFloat("Jump",m_Rigidbody.velocity.y);}float runCycle=Mathf.Repeat(m_Animator.GetCurrentAnimatorStateInfo(0).normalizedTime + m_RunCycleLegOffset, 1);float jumpLeg=(runCycle<k_Half ? 1:-1)*m_ForwardAmount;if(m_IsGrounded){m_Animator.SetFloat("JumpLeg", jumpLeg);}if(m_IsGrounded&&move.magnitude>0){m_Animator.speed=m_AnimSpeedMultiplier;}else{m_Animator.speed=1;}}void HandleAirborneMovement(){Vector3 extraGravityForce=(Physics.gravity*m_GravityMultiplier)-Physics.gravity;m_Rigidbody.AddForce(extraGravityForce);m_GroundCheckDistance=m_Rigidbody.velocity.y<0 ? m_OrigGroundCheckDistance:0.01f;}void HandleGroundedMovement(bool crouch,bool jump){if(jump&&!crouch&&m_Animator.GetCurrentAnimatorStateInfo(0).IsName("Grounded")){m_Rigidbody.velocity=new Vector3(m_Rigidbody.velocity.x,m_JumpPower,m_Rigidbody.velocity.z);m_IsGrounded=false;m_Animator.applyRootMotion=false;m_GroundCheckDistance=0.1f;JumpSound.Play();}}void ApplyExtraTurnRotation(){float turnSpeed=Mathf.Lerp(m_StationaryTurnSpeed,m_MovingTurnSpeed,m_ForwardAmount);transform.Rotate(0,m_TurnAmount*turnSpeed*Time.deltaTime,0);}public void OnAnimatorMove(){if(m_IsGrounded&&Time.deltaTime>0){Vector3 v=(m_Animator.deltaPosition*m_MoveSpeedMultiplier)/Time.deltaTime;v.y=m_Rigidbody.velocity.y;m_Rigidbody.velocity=v;}}void CheckGroundStatus(){RaycastHit hitInfo;
#if UNITY_EDITOR
			// helper to visualise the ground check ray in the scene view
			Debug.DrawLine(transform.position + (Vector3.up * 0.1f), transform.position + (Vector3.up * 0.1f) + (Vector3.down * m_GroundCheckDistance));
#endif
			if(Physics.Raycast(transform.position+(Vector3.up*0.1f),Vector3.down,out hitInfo,m_GroundCheckDistance)){m_GroundNormal = hitInfo.normal;m_IsGrounded=true;m_Animator.applyRootMotion=true;}else{m_IsGrounded=false;m_GroundNormal=Vector3.up;m_Animator.applyRootMotion=false;}}}}